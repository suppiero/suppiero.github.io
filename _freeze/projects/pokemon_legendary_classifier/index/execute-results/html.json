{
  "hash": "944d3cae869f447651fb0687b172fad9",
  "result": {
    "markdown": "---\ntitle: \"Classifying Legendary Pokemon\"\ndescription: \"Predicting whether a pokemon is legendary based on their stats & attributes.\"\nauthor:\n  - name: Piero Trujillo and Randy Ross\n    url: https://suppiero.github.io \n    affiliation: Bachelor's of Statistics and Data Science (UCSB) \n    #affiliation-url: https://ucsb-meds.github.io\ndate: 2020-12-04\ncategories: [K NEAREST NEIGHBORS, DATA VISUALIZATION, PYTHON]\ncitation:\n  url: https://suppiero.github.io/projects/pokemon_legendary_classifier/\n#bibliography: references.bib # fix bibliography\nformat:\n  html:\n    code-fold: false\n    code-summary: \"code dropdown\"\nimage: \"surprised_pikachu.png\"\ndraft: false # \"true\" will mean this is a draft post so it wont show up on my site\n---\n\n# Abstract\n\nThe focus of our project was to find a reliable way to classify legendary pokemon based on their different attributes. Many attributes of a pokemon were taken into account. These included their capture rate as well as their attack, defense, and speed stats. With our findings we could compare our results with ordinary pokemon, whose stats neighbored those of a legendary pokemon, in order to strong pokemon that would ordinarily be overlooked. Our data showed that the best classifiers for a legendary pokemon were their capture rate and defense stat. Therefore, legendary pokemon must have low capture rates and high defense stats. With this in mind, we were able to classify legendary pokemon with a success rate of 95.9%.\n\n# Introduction\n\nOur primary goal was to build a classifier to identify legendary pokemon. We wondered which statistic would be the best indicator of a legendary pokemon. By comparing the stats of both regular and legendary pokemon, we would be able to find hidden gems in the game and be closer to building a Pokemon dream team: a team of 6 Pokemon that inflicts the most damage while remaining relatively impervious to any other team of 6 Pokemon.\n\nOur motivation is that Pokemon is awesome, simple as that. As the leading franchise of all time, Pokemon holds a special place in the hearts of a lot of people. Every new generation brings a lot of fresh faces into the world of Pokemon and the pandemic has definitely given us the time and lingering nostalgia to rope us back in as we try to relive those fun times. Whether you’re an experienced trainer looking to optimize your playthrough or a newcomer ready to learn the basics, the conclusions from this data set will guide you through your Pokemon journey.\n\nFor readers unaware, Pokemon is a role playing game where you explore the world as a trainer who captures different pokemon, defeat gym leaders and eventually challenge elite trainers to become a pokemon master. Legendary pokemon can only be found once in the game, making them highly coveted and a rarity. They typically have very high stats, leading them to be very strong additions to your team. The main stats we are looking at  are capture rate, attack, defense, and speed. Capture rate is an important stat because it shows you the success rate of catching a pokemon. The higher the capture rate, the easier it is to catch a pokemon. Likewise, better Pokemon will have lower catch rates so you can’t easily get an overpowered pokemon. Therefore, legendary pokemon should correlate to a lower capture rate since they are the epitome of a powerful Pokemon. The attack and defense values show a pokemon’s base stats in these fields. Attack and defense correlate with their damage and resistance to physical move types like Rock or Normal types. In addition, Pokemon also have Special Attack and Special Defense stats to show their damage and resistance to special moves, usually with types like Fire or Psychic. Speed is an especially important stat because the fastest pokemon always attacks first and a higher speed stat makes it easier to land critical hits. The dataset we are using is [The Complete Pokemon Dataset](https://www.kaggle.com/rounakbanik/pokemon) by Rounak Banik, which contains information about 802 Pokemon from the first seven generations. The data set includes the names of the Pokemon, their primary and secondary types, attack and defense, and whether it is a legendary or not, in addition to other stats.\n\n# Data and EDA\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nfrom datascience import *\nimport random\nimport matplotlib\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nplt.style.use('fivethirtyeight')\nimport warnings\nwarnings.simplefilter('ignore', FutureWarning)\nnp.random.seed(3)\nrandom.seed(3)\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\npokemon = Table.read_table(\"/Users/brizaespinoza/Downloads/pokemon.csv\")\npokemon \n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n    <thead>\n        <tr>\n            <th>abilities</th> <th>against_bug</th> <th>against_dark</th> <th>against_dragon</th> <th>against_electric</th> <th>against_fairy</th> <th>against_fight</th> <th>against_fire</th> <th>against_flying</th> <th>against_ghost</th> <th>against_grass</th> <th>against_ground</th> <th>against_ice</th> <th>against_normal</th> <th>against_poison</th> <th>against_psychic</th> <th>against_rock</th> <th>against_steel</th> <th>against_water</th> <th>attack</th> <th>base_egg_steps</th> <th>base_happiness</th> <th>base_total</th> <th>capture_rate</th> <th>classfication</th> <th>defense</th> <th>experience_growth</th> <th>height_m</th> <th>hp</th> <th>japanese_name</th> <th>name</th> <th>percentage_male</th> <th>pokedex_number</th> <th>sp_attack</th> <th>sp_defense</th> <th>speed</th> <th>type1</th> <th>type2</th> <th>weight_kg</th> <th>generation</th> <th>is_legendary</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>['Overgrow', 'Chlorophyll']</td> <td>1          </td> <td>1           </td> <td>1             </td> <td>0.5             </td> <td>0.5          </td> <td>0.5          </td> <td>2           </td> <td>2             </td> <td>1            </td> <td>0.25         </td> <td>1             </td> <td>2          </td> <td>1             </td> <td>1             </td> <td>2              </td> <td>1           </td> <td>1            </td> <td>0.5          </td> <td>49    </td> <td>5120          </td> <td>70            </td> <td>318       </td> <td>45          </td> <td>Seed Pokémon       </td> <td>49     </td> <td>1059860          </td> <td>0.7     </td> <td>45  </td> <td>Fushigidaneフシギダネ</td> <td>Bulbasaur </td> <td>88.1           </td> <td>1             </td> <td>65       </td> <td>65        </td> <td>45   </td> <td>grass</td> <td>poison</td> <td>6.9      </td> <td>1         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>['Overgrow', 'Chlorophyll']</td> <td>1          </td> <td>1           </td> <td>1             </td> <td>0.5             </td> <td>0.5          </td> <td>0.5          </td> <td>2           </td> <td>2             </td> <td>1            </td> <td>0.25         </td> <td>1             </td> <td>2          </td> <td>1             </td> <td>1             </td> <td>2              </td> <td>1           </td> <td>1            </td> <td>0.5          </td> <td>62    </td> <td>5120          </td> <td>70            </td> <td>405       </td> <td>45          </td> <td>Seed Pokémon       </td> <td>63     </td> <td>1059860          </td> <td>1       </td> <td>60  </td> <td>Fushigisouフシギソウ </td> <td>Ivysaur   </td> <td>88.1           </td> <td>2             </td> <td>80       </td> <td>80        </td> <td>60   </td> <td>grass</td> <td>poison</td> <td>13       </td> <td>1         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>['Overgrow', 'Chlorophyll']</td> <td>1          </td> <td>1           </td> <td>1             </td> <td>0.5             </td> <td>0.5          </td> <td>0.5          </td> <td>2           </td> <td>2             </td> <td>1            </td> <td>0.25         </td> <td>1             </td> <td>2          </td> <td>1             </td> <td>1             </td> <td>2              </td> <td>1           </td> <td>1            </td> <td>0.5          </td> <td>100   </td> <td>5120          </td> <td>70            </td> <td>625       </td> <td>45          </td> <td>Seed Pokémon       </td> <td>123    </td> <td>1059860          </td> <td>2       </td> <td>80  </td> <td>Fushigibanaフシギバナ</td> <td>Venusaur  </td> <td>88.1           </td> <td>3             </td> <td>122      </td> <td>120       </td> <td>80   </td> <td>grass</td> <td>poison</td> <td>100      </td> <td>1         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>['Blaze', 'Solar Power']   </td> <td>0.5        </td> <td>1           </td> <td>1             </td> <td>1               </td> <td>0.5          </td> <td>1            </td> <td>0.5         </td> <td>1             </td> <td>1            </td> <td>0.5          </td> <td>2             </td> <td>0.5        </td> <td>1             </td> <td>1             </td> <td>1              </td> <td>2           </td> <td>0.5          </td> <td>2            </td> <td>52    </td> <td>5120          </td> <td>70            </td> <td>309       </td> <td>45          </td> <td>Lizard Pokémon     </td> <td>43     </td> <td>1059860          </td> <td>0.6     </td> <td>39  </td> <td>Hitokageヒトカゲ    </td> <td>Charmander</td> <td>88.1           </td> <td>4             </td> <td>60       </td> <td>50        </td> <td>65   </td> <td>fire </td> <td>nan   </td> <td>8.5      </td> <td>1         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>['Blaze', 'Solar Power']   </td> <td>0.5        </td> <td>1           </td> <td>1             </td> <td>1               </td> <td>0.5          </td> <td>1            </td> <td>0.5         </td> <td>1             </td> <td>1            </td> <td>0.5          </td> <td>2             </td> <td>0.5        </td> <td>1             </td> <td>1             </td> <td>1              </td> <td>2           </td> <td>0.5          </td> <td>2            </td> <td>64    </td> <td>5120          </td> <td>70            </td> <td>405       </td> <td>45          </td> <td>Flame Pokémon      </td> <td>58     </td> <td>1059860          </td> <td>1.1     </td> <td>58  </td> <td>Lizardoリザード     </td> <td>Charmeleon</td> <td>88.1           </td> <td>5             </td> <td>80       </td> <td>65        </td> <td>80   </td> <td>fire </td> <td>nan   </td> <td>19       </td> <td>1         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>['Blaze', 'Solar Power']   </td> <td>0.25       </td> <td>1           </td> <td>1             </td> <td>2               </td> <td>0.5          </td> <td>0.5          </td> <td>0.5         </td> <td>1             </td> <td>1            </td> <td>0.25         </td> <td>0             </td> <td>1          </td> <td>1             </td> <td>1             </td> <td>1              </td> <td>4           </td> <td>0.5          </td> <td>2            </td> <td>104   </td> <td>5120          </td> <td>70            </td> <td>634       </td> <td>45          </td> <td>Flame Pokémon      </td> <td>78     </td> <td>1059860          </td> <td>1.7     </td> <td>78  </td> <td>Lizardonリザードン   </td> <td>Charizard </td> <td>88.1           </td> <td>6             </td> <td>159      </td> <td>115       </td> <td>100  </td> <td>fire </td> <td>flying</td> <td>90.5     </td> <td>1         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>['Torrent', 'Rain Dish']   </td> <td>1          </td> <td>1           </td> <td>1             </td> <td>2               </td> <td>1            </td> <td>1            </td> <td>0.5         </td> <td>1             </td> <td>1            </td> <td>2            </td> <td>1             </td> <td>0.5        </td> <td>1             </td> <td>1             </td> <td>1              </td> <td>1           </td> <td>0.5          </td> <td>0.5          </td> <td>48    </td> <td>5120          </td> <td>70            </td> <td>314       </td> <td>45          </td> <td>Tiny Turtle Pokémon</td> <td>65     </td> <td>1059860          </td> <td>0.5     </td> <td>44  </td> <td>Zenigameゼニガメ    </td> <td>Squirtle  </td> <td>88.1           </td> <td>7             </td> <td>50       </td> <td>64        </td> <td>43   </td> <td>water</td> <td>nan   </td> <td>9        </td> <td>1         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>['Torrent', 'Rain Dish']   </td> <td>1          </td> <td>1           </td> <td>1             </td> <td>2               </td> <td>1            </td> <td>1            </td> <td>0.5         </td> <td>1             </td> <td>1            </td> <td>2            </td> <td>1             </td> <td>0.5        </td> <td>1             </td> <td>1             </td> <td>1              </td> <td>1           </td> <td>0.5          </td> <td>0.5          </td> <td>63    </td> <td>5120          </td> <td>70            </td> <td>405       </td> <td>45          </td> <td>Turtle Pokémon     </td> <td>80     </td> <td>1059860          </td> <td>1       </td> <td>59  </td> <td>Kameilカメール      </td> <td>Wartortle </td> <td>88.1           </td> <td>8             </td> <td>65       </td> <td>80        </td> <td>58   </td> <td>water</td> <td>nan   </td> <td>22.5     </td> <td>1         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>['Torrent', 'Rain Dish']   </td> <td>1          </td> <td>1           </td> <td>1             </td> <td>2               </td> <td>1            </td> <td>1            </td> <td>0.5         </td> <td>1             </td> <td>1            </td> <td>2            </td> <td>1             </td> <td>0.5        </td> <td>1             </td> <td>1             </td> <td>1              </td> <td>1           </td> <td>0.5          </td> <td>0.5          </td> <td>103   </td> <td>5120          </td> <td>70            </td> <td>630       </td> <td>45          </td> <td>Shellfish Pokémon  </td> <td>120    </td> <td>1059860          </td> <td>1.6     </td> <td>79  </td> <td>Kamexカメックス      </td> <td>Blastoise </td> <td>88.1           </td> <td>9             </td> <td>135      </td> <td>115       </td> <td>78   </td> <td>water</td> <td>nan   </td> <td>85.5     </td> <td>1         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>['Shield Dust', 'Run Away']</td> <td>1          </td> <td>1           </td> <td>1             </td> <td>1               </td> <td>1            </td> <td>0.5          </td> <td>2           </td> <td>2             </td> <td>1            </td> <td>0.5          </td> <td>0.5           </td> <td>1          </td> <td>1             </td> <td>1             </td> <td>1              </td> <td>2           </td> <td>1            </td> <td>1            </td> <td>30    </td> <td>3840          </td> <td>70            </td> <td>195       </td> <td>255         </td> <td>Worm Pokémon       </td> <td>35     </td> <td>1000000          </td> <td>0.3     </td> <td>45  </td> <td>Caterpieキャタピー   </td> <td>Caterpie  </td> <td>50             </td> <td>10            </td> <td>20       </td> <td>20        </td> <td>45   </td> <td>bug  </td> <td>nan   </td> <td>2.9      </td> <td>1         </td> <td>0           </td>\n        </tr>\n    </tbody>\n</table>\n<p>... (790 rows omitted)</p>\n```\n:::\n:::\n\n\n## The Complete Pokemon Dataset - Rounak Banik\n\nhttps://www.kaggle.com/rounakbanik/pokemon\n\n**Ethical Considerations**\n\n- Rounak Banik collected this data from http://serebii.net/, a very reputable Pokemon fan-site, because Pokemon is very special to him and built the dataset out of passion and curiosity for the game.\n- We believe the analysis of this dataset does not cause harm to anyone because those represented in the data only exist virtually.\n- Digital beings known as Pokemon are represented in the dataset. Nothing is being over-represented because the data is focusing solely on Pokemon and not any other groups.\n- This could be considered ethically wrong if you are new to the game and want to experience it naturally.\n\n**Relevant Attributes**\n- The only data missing from the dataset is Pokemon generation 8 (released in 2019), which would bring it up to date.\n- We are attempting to classify whether or not a certain Pokemon is legendary or not.\n\t+ The variable will be either 0 or 1, where 0 means not legendary, and 1 means legendary.\n- We will use attributes attack and sp_attack, defense and sp_defense (sp = special), capture rate, hp (hit points), and speed.\n- We removed one Pokemon whose capture rate was \"30 (Meteorite)255 (Core)\", which is not a plain number.\n\n## EDA\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\npokemon.scatter(\"attack\", \"defense\", group=\"is_legendary\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=747 height=457}\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\npokemon.scatter(\"sp_attack\", \"sp_defense\", group=\"is_legendary\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=747 height=458}\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\npokemon.scatter(\"hp\", \"defense\", group=\"is_legendary\")\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-6-output-1.png){width=747 height=457}\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nax = plt.figure(figsize=(8,8)).add_subplot(111, projection='3d')\nax.scatter(pokemon.column(\"attack\"),\n       \tpokemon.column(\"defense\"),\n       \tpokemon.column(\"speed\"),\n       \tc=pokemon.column(\"is_legendary\"));\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-7-output-1.png){width=655 height=641}\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nax = plt.figure(figsize=(8,8)).add_subplot(111, projection='3d')\nax.scatter(pokemon.column(\"capture_rate\"),\n       \tpokemon.column(\"attack\"),\n       \tpokemon.column(\"defense\"),\n       \tc=pokemon.column(\"is_legendary\"));\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-8-output-1.png){width=654 height=641}\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nbest_columns = pokemon.select(\"name\", \"attack\", \"defense\", \"capture_rate\", \"is_legendary\")\n\nlegendaries = best_columns.where(\"is_legendary\", are.equal_to(1))\n\ncapture_rate = legendaries.group(\"capture_rate\")\nattack = legendaries.group(\"attack\")\ndefense = legendaries.group(\"defense\")\n\ncapture_rate.show()\n# attack.show()\n# defense.show()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n    <thead>\n        <tr>\n            <th>capture_rate</th> <th>count</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>3           </td> <td>53   </td>\n        </tr>\n        <tr>\n            <td>15          </td> <td>1    </td>\n        </tr>\n        <tr>\n            <td>25          </td> <td>2    </td>\n        </tr>\n        <tr>\n            <td>30          </td> <td>1    </td>\n        </tr>\n        <tr>\n            <td>45          </td> <td>11   </td>\n        </tr>\n        <tr>\n            <td>255         </td> <td>2    </td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\nThe above table shows that 53 of the 70 legendary Pokemon have the lowest capture rate in the game.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nlowest_capture_rate = best_columns.sort(\"capture_rate\")\nlowest_capture_rate.take(range(20)).show()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n    <thead>\n        <tr>\n            <th>name</th> <th>attack</th> <th>defense</th> <th>capture_rate</th> <th>is_legendary</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Articuno </td> <td>85    </td> <td>100    </td> <td>3           </td> <td>1           </td>\n        </tr>\n        <tr>\n            <td>Zapdos   </td> <td>90    </td> <td>85     </td> <td>3           </td> <td>1           </td>\n        </tr>\n        <tr>\n            <td>Moltres  </td> <td>100   </td> <td>90     </td> <td>3           </td> <td>1           </td>\n        </tr>\n        <tr>\n            <td>Mewtwo   </td> <td>150   </td> <td>70     </td> <td>3           </td> <td>1           </td>\n        </tr>\n        <tr>\n            <td>Raikou   </td> <td>85    </td> <td>75     </td> <td>3           </td> <td>1           </td>\n        </tr>\n        <tr>\n            <td>Entei    </td> <td>115   </td> <td>85     </td> <td>3           </td> <td>1           </td>\n        </tr>\n        <tr>\n            <td>Suicune  </td> <td>75    </td> <td>115    </td> <td>3           </td> <td>1           </td>\n        </tr>\n        <tr>\n            <td>Lugia    </td> <td>90    </td> <td>130    </td> <td>3           </td> <td>1           </td>\n        </tr>\n        <tr>\n            <td>Ho-Oh    </td> <td>130   </td> <td>90     </td> <td>3           </td> <td>1           </td>\n        </tr>\n        <tr>\n            <td>Beldum   </td> <td>55    </td> <td>80     </td> <td>3           </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Metang   </td> <td>75    </td> <td>100    </td> <td>3           </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Metagross</td> <td>145   </td> <td>150    </td> <td>3           </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Regirock </td> <td>100   </td> <td>200    </td> <td>3           </td> <td>1           </td>\n        </tr>\n        <tr>\n            <td>Regice   </td> <td>50    </td> <td>100    </td> <td>3           </td> <td>1           </td>\n        </tr>\n        <tr>\n            <td>Registeel</td> <td>75    </td> <td>150    </td> <td>3           </td> <td>1           </td>\n        </tr>\n        <tr>\n            <td>Latias   </td> <td>100   </td> <td>120    </td> <td>3           </td> <td>1           </td>\n        </tr>\n        <tr>\n            <td>Latios   </td> <td>130   </td> <td>100    </td> <td>3           </td> <td>1           </td>\n        </tr>\n        <tr>\n            <td>Kyogre   </td> <td>150   </td> <td>90     </td> <td>3           </td> <td>1           </td>\n        </tr>\n        <tr>\n            <td>Groudon  </td> <td>180   </td> <td>160    </td> <td>3           </td> <td>1           </td>\n        </tr>\n        <tr>\n            <td>Jirachi  </td> <td>100   </td> <td>100    </td> <td>3           </td> <td>1           </td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\nThe above table shows that only 3 of the 20 lowest capture rates are non-legendary.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nhighest_defense = best_columns.sort(\"defense\", descending=True)\n\nhighest_defense_20 = highest_defense.take(range(20))\nhighest_defense_20.show()\nhighest_defense_20.group(\"is_legendary\")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n    <thead>\n        <tr>\n            <th>name</th> <th>attack</th> <th>defense</th> <th>capture_rate</th> <th>is_legendary</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Steelix   </td> <td>125   </td> <td>230    </td> <td>25          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Shuckle   </td> <td>10    </td> <td>230    </td> <td>190         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Aggron    </td> <td>140   </td> <td>230    </td> <td>45          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Regirock  </td> <td>100   </td> <td>200    </td> <td>3           </td> <td>1           </td>\n        </tr>\n        <tr>\n            <td>Avalugg   </td> <td>117   </td> <td>184    </td> <td>55          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Slowbro   </td> <td>75    </td> <td>180    </td> <td>75          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Cloyster  </td> <td>95    </td> <td>180    </td> <td>60          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Bastiodon </td> <td>52    </td> <td>168    </td> <td>45          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Onix      </td> <td>45    </td> <td>160    </td> <td>45          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Groudon   </td> <td>180   </td> <td>160    </td> <td>3           </td> <td>1           </td>\n        </tr>\n        <tr>\n            <td>Toxapex   </td> <td>63    </td> <td>152    </td> <td>75          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Tyranitar </td> <td>164   </td> <td>150    </td> <td>45          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Metagross </td> <td>145   </td> <td>150    </td> <td>3           </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Registeel </td> <td>75    </td> <td>150    </td> <td>3           </td> <td>1           </td>\n        </tr>\n        <tr>\n            <td>Doublade  </td> <td>110   </td> <td>150    </td> <td>90          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Carbink   </td> <td>50    </td> <td>150    </td> <td>60          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Probopass </td> <td>55    </td> <td>145    </td> <td>60          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Cofagrigus</td> <td>50    </td> <td>145    </td> <td>90          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Forretress</td> <td>90    </td> <td>140    </td> <td>75          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Scizor    </td> <td>150   </td> <td>140    </td> <td>25          </td> <td>0           </td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n    <thead>\n        <tr>\n            <th>is_legendary</th> <th>count</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>0           </td> <td>17   </td>\n        </tr>\n        <tr>\n            <td>1           </td> <td>3    </td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nhighest_attack = best_columns.sort(\"attack\", descending=True)\n\nhighest_attack_20 = highest_attack.take(range(20))\nhighest_attack_100 = highest_attack.take(range(100))\nhighest_attack_200 = highest_attack.take(range(200))\n\n# Number of legendaries in top defense pokemon\nhighest_attack_20_sum = highest_attack_20.stats().where(\"statistic\", are.equal_to(\"sum\"))[5][0]\nhighest_attack_100_sum = highest_attack_100.stats().where(\"statistic\", are.equal_to(\"sum\"))[5][0]\nhighest_attack_200_sum = highest_attack_200.stats().where(\"statistic\", are.equal_to(\"sum\"))[5][0]\n\nprint(\"% legendary in top 20:\", (highest_attack_20_sum / 20) * 100)\nprint(\"% legendary in top 100:\", (highest_attack_100_sum / 100) * 100)\nprint(\"% legendary in top 200:\", (highest_attack_200_sum / 200) * 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n% legendary in top 20: 35.0\n% legendary in top 100: 28.0\n% legendary in top 200: 23.0\n```\n:::\n:::\n\n\nThis may be implying that when sorted by attack, more legendaries are concentrated at the top.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nhighest_defense_20 = highest_defense.take(range(20))\nhighest_defense_100 = highest_defense.take(range(100))\nhighest_defense_200 = highest_defense.take(range(200))\n\n# Number of legendaries in top defense pokemon\nhighest_defense_20_sum = highest_defense_20.stats().where(\"statistic\", are.equal_to(\"sum\"))[5][0]\nhighest_defense_100_sum = highest_defense_100.stats().where(\"statistic\", are.equal_to(\"sum\"))[5][0]\nhighest_defense_200_sum = highest_defense_200.stats().where(\"statistic\", are.equal_to(\"sum\"))[5][0]\n\nprint(\"% legendary in top 20:\", (highest_defense_20_sum / 20) * 100)\nprint(\"% legendary in top 100:\", (highest_defense_100_sum / 100) * 100)\nprint(\"% legendary in top 200:\", (highest_defense_200_sum / 200) * 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n% legendary in top 20: 15.0\n% legendary in top 100: 22.0\n% legendary in top 200: 23.5\n```\n:::\n:::\n\n\nUnlike attack, when sorted by defense, there is not a higher concentration of legendaries at the top.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nlowest_defense = best_columns.sort(\"defense\")\n\nlowest_defense_20 = lowest_defense.take(range(20))\nlowest_defense_20.show()\nlowest_defense_20.group(\"is_legendary\")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n    <thead>\n        <tr>\n            <th>name</th> <th>attack</th> <th>defense</th> <th>capture_rate</th> <th>is_legendary</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Chansey   </td> <td>5     </td> <td>5      </td> <td>30          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Happiny   </td> <td>5     </td> <td>5      </td> <td>130         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Blissey   </td> <td>10    </td> <td>10     </td> <td>30          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Abra      </td> <td>20    </td> <td>15     </td> <td>200         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Pichu     </td> <td>40    </td> <td>15     </td> <td>190         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Igglybuff </td> <td>30    </td> <td>15     </td> <td>170         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Smoochum  </td> <td>30    </td> <td>15     </td> <td>45          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Jigglypuff</td> <td>45    </td> <td>20     </td> <td>170         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Carvanha  </td> <td>90    </td> <td>20     </td> <td>225         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Feebas    </td> <td>15    </td> <td>20     </td> <td>255         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Whismur   </td> <td>51    </td> <td>23     </td> <td>190         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Ralts     </td> <td>25    </td> <td>25     </td> <td>235         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Cleffa    </td> <td>25    </td> <td>28     </td> <td>150         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Weedle    </td> <td>35    </td> <td>30     </td> <td>255         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Spearow   </td> <td>60    </td> <td>30     </td> <td>255         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Diglett   </td> <td>55    </td> <td>30     </td> <td>255         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Kadabra   </td> <td>35    </td> <td>30     </td> <td>100         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Gastly    </td> <td>35    </td> <td>30     </td> <td>190         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Hoothoot  </td> <td>30    </td> <td>30     </td> <td>255         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Ledyba    </td> <td>20    </td> <td>30     </td> <td>255         </td> <td>0           </td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n    <thead>\n        <tr>\n            <th>is_legendary</th> <th>count</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>0           </td> <td>20   </td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nlowest_attack = best_columns.sort(\"attack\")\n\nlowest_attack_20 = lowest_attack.take(range(20))\nlowest_attack_20.show()\nlowest_attack_20.group(\"is_legendary\")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n    <thead>\n        <tr>\n            <th>name</th> <th>attack</th> <th>defense</th> <th>capture_rate</th> <th>is_legendary</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Chansey </td> <td>5     </td> <td>5      </td> <td>30          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Happiny </td> <td>5     </td> <td>5      </td> <td>130         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Magikarp</td> <td>10    </td> <td>55     </td> <td>255         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Shuckle </td> <td>10    </td> <td>230    </td> <td>190         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Blissey </td> <td>10    </td> <td>10     </td> <td>30          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Feebas  </td> <td>15    </td> <td>20     </td> <td>255         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Metapod </td> <td>20    </td> <td>55     </td> <td>120         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Abra    </td> <td>20    </td> <td>15     </td> <td>200         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Ledyba  </td> <td>20    </td> <td>30     </td> <td>255         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Togepi  </td> <td>20    </td> <td>65     </td> <td>190         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Marill  </td> <td>20    </td> <td>50     </td> <td>190         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Smeargle</td> <td>20    </td> <td>35     </td> <td>45          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Azurill </td> <td>20    </td> <td>40     </td> <td>150         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Mantyke </td> <td>20    </td> <td>50     </td> <td>25          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Spewpa  </td> <td>22    </td> <td>60     </td> <td>120         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Wynaut  </td> <td>23    </td> <td>48     </td> <td>125         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Bronzor </td> <td>24    </td> <td>86     </td> <td>255         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Kakuna  </td> <td>25    </td> <td>50     </td> <td>120         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Cleffa  </td> <td>25    </td> <td>28     </td> <td>150         </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>Ralts   </td> <td>25    </td> <td>25     </td> <td>235         </td> <td>0           </td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n    <thead>\n        <tr>\n            <th>is_legendary</th> <th>count</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>0           </td> <td>20   </td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\nIt seems that the capture rate of the Pokemon is the best indicator of whether it is legendary or not. The attack and defense of the Pokemon may also be a good indicator.\n\n# Classification\n\n## Training and testing sets\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\npokemon_classify_columns = pokemon.select(\"attack\", \"defense\", \"capture_rate\", \"is_legendary\")\n\npokemon_classify_columns.stats()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n    <thead>\n        <tr>\n            <th>statistic</th> <th>attack</th> <th>defense</th> <th>capture_rate</th> <th>is_legendary</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>min      </td> <td>5     </td> <td>5      </td> <td>3           </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>max      </td> <td>185   </td> <td>230    </td> <td>255         </td> <td>1           </td>\n        </tr>\n        <tr>\n            <td>median   </td> <td>75    </td> <td>70     </td> <td>60          </td> <td>0           </td>\n        </tr>\n        <tr>\n            <td>sum      </td> <td>62264 </td> <td>58420  </td> <td>79009       </td> <td>70          </td>\n        </tr>\n    </tbody>\n</table>\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nall_legendaries = pokemon_classify_columns.where(\"is_legendary\", are.equal_to(1)).sample(with_replacement=False)\nnon_legendaries = pokemon_classify_columns.where(\"is_legendary\", are.equal_to(0)).sample(with_replacement=False)\n\nnum_legendary = all_legendaries.num_rows\nnum_non_legendary = non_legendaries.num_rows\n\nnum_legendary_training = int(0.667 * num_legendary)\nnum_non_legendary_training = int(0.667 * num_non_legendary)\n\n\n# Take first two thirds legendary and non-legendary pokemon\ntraining_legendary = all_legendaries.take(np.arange(num_legendary_training))\ntraining_non_legendary = non_legendaries.take(np.arange(num_non_legendary_training))\n\n\n# Take last third legendary and non-legendary\ntesting_legendary = all_legendaries.take(np.arange(num_legendary_training, num_legendary))\ntesting_non_legendary = non_legendaries.take(np.arange(num_non_legendary_training, num_non_legendary))\n\n\n# Append training and testing legendary and non-legendary\ntesting_legendary.append(testing_non_legendary)\ntraining_legendary.append(training_non_legendary)\n\n\n# Shuffle training and testing and assign new names\ntraining = training_legendary.shuffle()\ntesting = testing_legendary.shuffle()\n\ntraining.relabel(\"is_legendary\", \"Class\")\ntesting.relabel(\"is_legendary\", \"Class\")\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<table border=\"1\" class=\"dataframe\">\n    <thead>\n        <tr>\n            <th>attack</th> <th>defense</th> <th>capture_rate</th> <th>Class</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>92    </td> <td>108    </td> <td>100         </td> <td>0    </td>\n        </tr>\n        <tr>\n            <td>50    </td> <td>120    </td> <td>75          </td> <td>0    </td>\n        </tr>\n        <tr>\n            <td>135   </td> <td>105    </td> <td>75          </td> <td>0    </td>\n        </tr>\n        <tr>\n            <td>15    </td> <td>20     </td> <td>255         </td> <td>0    </td>\n        </tr>\n        <tr>\n            <td>95    </td> <td>95     </td> <td>45          </td> <td>0    </td>\n        </tr>\n        <tr>\n            <td>105   </td> <td>90     </td> <td>45          </td> <td>0    </td>\n        </tr>\n        <tr>\n            <td>115   </td> <td>60     </td> <td>60          </td> <td>0    </td>\n        </tr>\n        <tr>\n            <td>74    </td> <td>74     </td> <td>45          </td> <td>0    </td>\n        </tr>\n        <tr>\n            <td>120   </td> <td>75     </td> <td>45          </td> <td>0    </td>\n        </tr>\n        <tr>\n            <td>47    </td> <td>75     </td> <td>150         </td> <td>0    </td>\n        </tr>\n    </tbody>\n</table>\n<p>... (258 rows omitted)</p>\n```\n:::\n:::\n\n\nWe are putting two thirds of all the Pokemon into the training set, and the other third into the testing set. To make sure both sets have legendary Pokemon, first the legendary pokemon are separated from the non-legendary, and two thirds from each catagory are put into the training set, and the rest into the testing set.\n\n### Classifier\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndef accuracy(predictions, labels):\n\tdiff = labels - predictions\n\tnum_incorrect = np.count_nonzero(diff)\n\tnum_correct = len(labels) - num_incorrect\n\taccuracy = num_correct / len(labels)\n\treturn accuracy\n```\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndef distance_nn(point1, point2):\n  \"\"\"The distance between two arrays of numbers.\"\"\"\n  return np.sqrt(np.sum((point1 - point2)**2))\n\ndef all_distances(training, point):\n  \"\"\"The distance between p (an array of numbers) and the numbers in row i of attribute_table.\"\"\"\n  attributes = training.drop('Class')\n  def distance_from_point(row):\n    return distance_nn(point, np.array(row))\n  return attributes.apply(distance_from_point)\n\ndef table_with_distances(training, point):\n  \"\"\"A copy of the training table with the distance from each row to array p.\"\"\"\n  return training.with_column('Distance', all_distances(training, point))\n\ndef closest(training, point, k):\n\t\"\"\"A table containing the k closest rows in the training table to array p.\"\"\"\n\twith_dists = table_with_distances(training, point)\n\tsorted_by_distance = with_dists.sort('Distance')\n\ttopk = sorted_by_distance.take(np.arange(k))\n\treturn topk\n\ndef majority(topkclasses):\n  \"\"\"1 if the majority of the \"Class\" column is 1s, and 0 otherwise.\"\"\"\n  ones = topkclasses.where('Class', are.equal_to(1)).num_rows\n  zeros = topkclasses.where('Class', are.equal_to(0)).num_rows\n  if ones > zeros:\n    return 1\n  else:\n    return 0\n\ndef classify(training, p, k):\n  \"\"\"Classify an example with attributes p using k-nearest neighbor classification with the given training table.\"\"\"\n  closestk = closest(training, p, k)\n  topkclasses = closestk.select('Class')\n  return majority(topkclasses)\n\ndef classify_table(training, points, k):\n  \"\"\"Classify a table of unlabled points using KNN\"\"\"\n  def classify_p(p):\n    return classify(training, p, k)\n\n  classes = points.apply(classify_p)\n  return points.with_column('Class', classes)\n```\n:::\n\n\n##  Classifying Legendary Pokemon\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nprediction_1 = classify_table(training, testing.drop(\"Class\"), 1)\nprediction_3 = classify_table(training, testing.drop(\"Class\"), 3)\nprediction_5 = classify_table(training, testing.drop(\"Class\"), 5)\n```\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\naccuracy_1 = accuracy(prediction_1.column(\"Class\"), testing.column(\"Class\"))\naccuracy_3 = accuracy(prediction_3.column(\"Class\"), testing.column(\"Class\"))\naccuracy_5 = accuracy(prediction_5.column(\"Class\"), testing.column(\"Class\"))\n\nprint(\"k=1 ->\", accuracy_1)\nprint(\"k=3 ->\", accuracy_3)\nprint(\"k=5 ->\", accuracy_5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nk=1 -> 0.9738805970149254\nk=3 -> 0.9701492537313433\nk=5 -> 0.9701492537313433\n```\n:::\n:::\n\n\n### Results\n\nThe classifier was run using a few different k-values for the k-nearest neighbor algorithm. Using the 1st nearest-neighbor, the accuracy was about 95%. Going to the 3 nearest neighbors, the accuracy went up to about 95.5%. With 5 nearest neighbors, the accuracy was 95.9%. Increasing the k-value just slightly increases the accuracy of the classifier.\n\n# Analysis, Results, and Interpretation\n\nWe achieved our goal because we were able to correctly classify legendary pokemon with a 95.9% success rate. We ran into a few issues, such as needing to relabel certain columns of the dataset to make sure it worked with our classification algorithm, and we learned how to find and consider any ethical concerns with our topic.\n\nThe classifier was run using different k-values for the k-nearest neighbor algorithm. Using the 1st nearest-neighbor, the accuracy was about 95%. Going to the three nearest neighbors, the accuracy went up to about 95.5%. With 5 nearest neighbors, the accuracy was 95.9%. Increasing the k-value slightly increases the accuracy of the classifier.\n\nThese results show that legendary pokemon are very likely to have high defense stats and low capture rates. We sorted all pokemon based on capture rate and defense to find specific examples to back up our claims. First, we sorted by capture rate. Out of the top 20 pokemon with the lowest capture rate, we found that all pokemon except for the three were legendary pokemon . All of the legendary pokemon had the lowest capture rate in the game, 3. The three non-legendary pokemon in the top 20 are all part of the Metagross evolution, an extremely powerful pokemon in its own right. However, we will point out that it’s a very and you receive it as a gift in his debut generation after you have already beaten the game. Second, we sorted by defense. Although we saw that the top 20 wasn’t nearly as dominated by legendaries as sorting by capture rate, we can point out that the ordinary pokemon who made and topped the defense list also had relatively higher capture rates when compared to a legendary pokemon. For example, Steelix (non-legendary) who boasts the highest defense is at the top of the list but is about eight times more easy to catch than any of the legendary pokemon in the top 20 for capture rate. Likewise, Shuckle (non-legendary), who is second on this list, has a capture rate of 190, more than 63 times easier to catch than any of the legendary pokemon in the top 20 for capture rate. Steelix actually has the lowest capture rate out of all of the non-legendary pokemon in the top 20. In contrast, all of the legendary pokemon in the top 20 have a capture rate of 3 in the top 20 highest defense list. So that’s why it is important to look at both the capture rate and the defense stat. Our claims were solidified when we looked at the top 20 lowest ranked pokemon for defense and capture rate. There were no legendary pokemon in either of those lists. Likewise, a lot of the same pokemon were found in both of the lowest ranked lists. Examples include Spearow (30 defense, 255 capture rate), Weedle (30 defense, 255 capture rate), Feebas (20 defense, 255 capture rate), and Abra (15 defense, 200 capture rate).\n\nThus a very basic pokemon will have a high capture rate and low defense stat while legendary pokemon will have a low capture rate and high defense stats. Therefore, defense and capture rate are the best classifiers for legendary pokemon.\n\n**Ethics**\n\nA positive result that stems from our results is that it allows you to play the game more efficiently. With knowledge of the capture rate, we know whether to use an ordinary Pokeball or more effective equipment, like an Ultraball. This way you can save your hard earned in-game money. Our results are likely to affect players who want to learn more in depth about the game, whether they are new or old players. Unless they read our results however, they are not very likely to be affected by them.\n\nOur results could have a major ethical impact. For example, we could hurt a legendary pokemon’s feelings if our classifier fails to identify it as a legendary pokemon. Pokemon is also a very enjoyable game and could lead to game addiction. Unsatisfied with the current state of the world, people find solace in the world of pokemon instead of living their life to the fullest. The hours they spend playing Pokemon could also damage their eyesight. Pokemon has also been an ethically polarizing topic for animal rights activists and organizations such as PETA. They claim pokemon are enslaved and forced to fight each other for their owner’s pleasure, similar to illegal dogfighting. On the surface, it is easy to agree with this claim, as the concept of the game is to use your pokemon to defeat other trainers and achieve glory. However, by watching the anime, there are many examples of pokemon and humans living side by side. They aren’t restricted to living in pokeballs, it's just a convenient way of living. Likewise, they are able to make decisions for themselves. Pikachu, the most famous pokemon of the entire series, actually abhors being inside a pokeball and perches on Ash’s shoulder instead. Meanwhile, there are a number of cases where pokemon leave their trainers. Ash’s Butterfree found a mate and left him to live with the rest of its species. Ash’s Primeape also chose to live in a dojo and train in order to become a P1 fighting champion, and Ash’s Charizard, arguably one of his best pokemon, originally belonged to another trainer who abandoned him for being weak. Charizard then rejected reuniting himself with his former trainer when he attempted to take him back after seeing his growth. So just because a pokemon is caught, doesn’t mean they are forced to live in captivity. In addition there are many pokemon who work side by side with their trainers. Fighting type pokemon have been known to work on construction sites with workers, and hospitals employ Chanseys and Blisseys to help nurses heal pokemon and create medicine. By looking at the franchise you can see that pokemon isn't some twisted form of slavery. The message of pokemon is to find new friends and grow together. Whether that be through competing in tournaments together or traveling the world, an everlasting bond is built.\n\n# Conclusions and Future Work\n\nBased on our data, our conclusions show that the best classifiers for legendary pokemon are capture rate and defense. We supported the results from our K Nearest Neighbors algorithm by creating multiple tables of the top 20 highest and lowest ranked pokemon for capture rate and defense. Analyzing these tables verified these claims as legendary pokemon dominated the top 20 lowest capture rate table and the non-legendary pokemon who bested the top 20 highest defense table had way higher capture rates than a legendary pokemon. With this knowledge, we were able to classify legendary pokemon with a success rate of 95.9%. Therefore, legendary pokemon will have low capture rates and high defense stats.\n\nOther questions we can address with our research is whether the size and weight of a pokemon correlates with their different attack and defense stats to see if bigger and beefier pokemon are necessarily stronger. We could also rank all of the legendary pokemon to find the best legendary across all generations. Another extension of our analysis could be to find the ordinary pokemon that ranked closely to legendary pokemon in order to find strong non-legendary pokemon. We find our results to be trustworthy since our algorithm has a high success rate. Our results can be used to help new and old players alike, allowing them to optimize their teams or learn how different pokemon statistics can help them succeed in the game. We are looking forward to making more statistical analyses to assist and entertain all players, as they look to enjoy themselves in the world of Pokemon.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}